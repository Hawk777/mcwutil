# Set up general C++ configuration.
cc.coptions += -Wall -Wextra -Wformat=2 -Wstrict-aliasing=2 -Wold-style-cast -Wconversion -Wundef -Wmissing-declarations -Wredundant-decls -fno-common -fstrict-aliasing
cc.poptions += -D_FILE_OFFSET_BITS=64 "-I$out_root" "-I$src_root"
cxx.std = experimental
using cxx
cxx{*}: extension = cpp
hxx{*}: extension = hpp

# The “in” module is used for Doxygen builds.
using in

# Build the main and unit test executables as part of the default update
# operation.
dir{.}: dir{mcwutil}
mcwutil/
{
	import libs = libxml-2.0%lib{libxml2} zlib%lib{z}
	import test_libs = cppunit%lib{cppunit}

	libue{mcwutil}: {cxx hxx}{** -**.test... -main} $libs

	dir{.}: exe{mcwutil}
	exe{mcwutil}: libue{mcwutil} cxx{main}

	exe{*.test}:
	{
		install = false
		test = true
	}
	for test_source_file: cxx{**.test...}
	{
		dir = $directory($test_source_file)
		basename = $name($test_source_file)...
		dir{.}: $dir/exe{$basename}
		$dir/exe{$basename}: $test_source_file ../test_helpers/libue{test_helpers} libue{mcwutil} $test_libs
		$dir/exe{$basename}: libue{mcwutil}: bin.whole = false
	}
}

# Unit tests also require a helper library.
dir{.}: dir{test_helpers}
test_helpers/
{
	dir{.}: libue{test_helpers}: {cxx hxx}{**}
}

# Run clang-format as part of the test operation.
dir{.}: alias{check-format}: {cxx hxx}{**}
% test
{{
	diag clang-format $<
	clang-format --Werror --dry-run --style=file $path($<)
}}

# Build the documentation as part of the default update operation.
import! doxygen = doxygen%exe{doxygen}
dir{.}: alias{doc}
alias{doc}: file{html/index.html}
file{html/index.html}: file{Doxyfile} $doxygen {cxx hxx}{mcwutil/**} fsdir{html}
% update
{{
	diag doxygen ($<[0])
	$doxygen $path($<[0])
}}
% clean
{{
	diag rm html
	rm -rf html
}}
file{Doxyfile}: in{Doxyfile}
{
	in.symbol = "|"
	input_src = "$src_root/mcwutil"
	input_out = "$out_root/mcwutil"
}
